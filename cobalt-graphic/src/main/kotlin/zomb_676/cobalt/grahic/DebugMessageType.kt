package zomb_676.cobalt.grahic

import org.lwjgl.opengl.GL43

object DebugMessageType {
    enum class MessageSource(val type: Int, val enumName: String, val description: String) {
        API(GL43.GL_DEBUG_SOURCE_API, "GL_DEBUG_SOURCE_API", "Calls to the OpenGL API"),
        WINDOW_SYSTEM(
            GL43.GL_DEBUG_SOURCE_WINDOW_SYSTEM,
            "GL_DEBUG_SOURCE_WINDOW_SYSTEM",
            "Calls to a window-system API"
        ),
        SHADER_COMPILER(
            GL43.GL_DEBUG_SOURCE_SHADER_COMPILER,
            "GL_DEBUG_SOURCE_SHADER_COMPILER",
            "A compiler for a shading language"
        ),
        THIRD_PARTY(
            GL43.GL_DEBUG_SOURCE_THIRD_PARTY,
            "GL_DEBUG_SOURCE_THIRD_PARTY",
            "An application associated with OpenGL"
        ),
        APPLICATION(
            GL43.GL_DEBUG_SOURCE_APPLICATION,
            "GL_DEBUG_SOURCE_APPLICATION",
            "Generated by the user of this application"
        ),
        OTHER(GL43.GL_DEBUG_SOURCE_OTHER, "GL_DEBUG_SOURCE_OTHER", "Some source that isn't one of these");

        companion object {
            private val map = values().associateBy { it.type }
            fun getDescriptionByValue(int: Int) = map[int]!!
        }
    }

    enum class MessageType(val type: Int, val enumName: String, val description: String) {
        ERROR(GL43.GL_DEBUG_TYPE_ERROR, "GL_DEBUG_TYPE_ERROR", "An error, typically from the API"),
        DEPRECATED(
            GL43.GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR,
            "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR",
            "Some behavior marked deprecated has been used"
        ),
        UNDEFINED(
            GL43.GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR,
            "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR",
            "Something has invoked undefined behavior"
        ),
        PORTABILITY(
            GL43.GL_DEBUG_TYPE_PORTABILITY,
            "GL_DEBUG_TYPE_PORTABILITY",
            "Some functionality the user relies upon is not portable"
        ),
        PERFORMANCE(
            GL43.GL_DEBUG_TYPE_PERFORMANCE,
            "GL_DEBUG_TYPE_PERFORMANCE",
            "Code has triggered possible performance issues"
        ),
        MARKER(GL43.GL_DEBUG_TYPE_MARKER, "GL_DEBUG_TYPE_MARKER", "Command stream annotation"),
        GROUP_PUSH(GL43.GL_DEBUG_TYPE_PUSH_GROUP, "GL_DEBUG_TYPE_PUSH_GROUP", "Group pushing"),
        GROUP_POP(GL43.GL_DEBUG_TYPE_POP_GROUP, "GL_DEBUG_TYPE_POP_GROUP", "Group popping"),
        OTHER(GL43.GL_DEBUG_TYPE_OTHER, "GL_DEBUG_TYPE_OTHER", "Some type that isn't one of these");

        companion object {
            private val map = values().associateBy { it.type }
            fun getDescriptionByValue(int: Int) = map[int]!!
        }
    }

    enum class MessageSeverity(val type: Int, val enumName: String, val description: String) {
        HIGH(
            GL43.GL_DEBUG_SEVERITY_HIGH, "GL_DEBUG_SEVERITY_HIGH",
            "All OpenGL Errors, shader compilation/linking errors, or highly-dangerous undefined behavior"
        ),
        MEDIUM(
            GL43.GL_DEBUG_SEVERITY_MEDIUM, "GL_DEBUG_SEVERITY_MEDIUM",
            "Major performance warnings, shader compilation/linking warnings, or the use of deprecated functionality"
        ),
        LOW(
            GL43.GL_DEBUG_SEVERITY_LOW, "GL_DEBUG_SEVERITY_LOW",
            "Redundant state change performance warning, or unimportant undefined behavior"
        ),
        NOTIFICATION(
            GL43.GL_DEBUG_SEVERITY_NOTIFICATION,
            "GL_DEBUG_SEVERITY_NOTIFICATION",
            "Anything that isn't an error or performance issue."
        );

        companion object {
            private val map = values().associateBy { it.type }
            fun getDescriptionByValue(int: Int) = map[int]!!
        }
    }
}